<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Foldbyte's blog]]></title>
  <link href="http://foldbyte.github.io/atom.xml" rel="self"/>
  <link href="http://foldbyte.github.io/"/>
  <updated>2019-11-03T09:01:51+01:00</updated>
  <id>http://foldbyte.github.io/</id>
  <author>
    <name><![CDATA[M.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Useful Gcloud/Kubernetes Commands]]></title>
    <link href="http://foldbyte.github.io/blog/2019/05/10/useful-gloud-slash-kubernetes-commands/"/>
    <updated>2019-05-10T09:08:21+02:00</updated>
    <id>http://foldbyte.github.io/blog/2019/05/10/useful-gloud-slash-kubernetes-commands</id>
    <content type="html"><![CDATA[<p>Doing Devops work from time to time makes me feel dizzy because I constantly forget many important commands when using <strong>kubectl</strong> or <strong>gcloud</strong>, e.g: how to change a context in kubectl or how to quickly create a cluster on GCloud, and so on&hellip;
Sure you can go to the documentation and easily find it but there are many pages with explanation, tutorials so one can get lost.</p>

<p>Here I&rsquo;m gonna publish some of the most useful commands I use in my daily work.</p>

<h2>gcloud commands</h2>

<p>Fist of all you create a cluster that consists of three nodes</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">gcloud container clusters create cluster_name --num-nodes 3 --machine-type g1-small (or f1-micro)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Personally I prefer g1-small because then you get: 0.5vCPU and 1.7GB of RAM whereas with f1-micro you get only 0.2vCPU and 0.6GB of RAM.
It might be a problem if you start using helm. You&rsquo;ll be able to run a simple Node.js application but won&rsquo;t be able to run for instance: Prometheus.
You can even have problem with installing helm&rsquo;s Tiller ;)
Of course there are many many other machine types. To check them simply type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">gcloud compute machine-types list</span>
</span></code></pre></td></tr></table></div></figure>


<p>or check: <a href="https://cloud.google.com/compute/docs/machine-types">Google Cloud Machine Types</a></p>

<p>When a cluster is already created we need to add credentials to be able to use <strong>kubectl</strong> command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">gcloud container clusters get-credentials cluster_name</span>
</span></code></pre></td></tr></table></div></figure>


<p>This command generates an entry for a given <strong>cluster_name</strong> so that we can use kubectl on that cluster.</p>

<h2>kubectl</h2>

<p>As a DevOps Engineer we can operate on many clusters, for example we have minikube installed on our local machines, we&rsquo;re responsible for GKE or EKS clusters. We must switch between those environments:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">kubectl config get-contexts</span>
</span></code></pre></td></tr></table></div></figure>


<p>The command above shows all those contexts/environments.</p>

<p>So if you want to switch to another cluster just type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">kubectl config set-context context_name</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s time to see what we&rsquo;ve created before. To see of how many nodes consists your cluster type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">kubectl get nodes</span>
</span></code></pre></td></tr></table></div></figure>


<p>To see all the pods you have in your cluster type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">kubectl get pods</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">kubectl expose rc cluster_name --type=LoadBalancer --name rc_name</span>
</span></code></pre></td></tr></table></div></figure>


<p>To see all services in your cluster type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">kubectl get services //or kubectl get svc</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to have more replicas of the particular pod type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">kubectl scale rc cluster_name --replicas=3</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">kubectl get pods | nodes -o wide </span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">kubectl logs pod_name</span>
</span></code></pre></td></tr></table></div></figure>


<p>If there are more than one container in the Pod you need to add <em>-c</em> and then container name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">kubectl logs pod_name -c container_name</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Port Forwarding.</h2>

<p>When you want to talk to a specific Pod especially during development or when debugging you can connect to the Pod like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">kubectl port-forward pod_name 9000:8080</span>
</span></code></pre></td></tr></table></div></figure>


<p>This command is very useful because you can talk to your pod as if it was on your local machine. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">curl localhost:9000</span>
</span></code></pre></td></tr></table></div></figure>


<p>You no longer have to create services to expose the pod on the Internet.</p>

<p>Sometimes you want to test your service from inside of the cluster.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">kubectl exec pod_name  -- curl -s http://SERVICE_IP</span>
</span></code></pre></td></tr></table></div></figure>


<p>Double dash shows the end of kubectl parameters. Everything after that is the command that should be executed in the Pod.</p>

<p>This allows you to hit your internal service from inside of the Pod(which itself is internal) that is backed by other pods and send you some response. This way you can check if the service works correctly without changing it and exposing to the Internet.</p>

<h2>Troubleshooting.</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">kubectl run dnsutils --image=tutum/dnsutils --generator=run-pod/v1 --command  -- sleep infinity</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Function Contexts in JavaScript]]></title>
    <link href="http://foldbyte.github.io/blog/2018/07/19/function-contexts-in-javascript/"/>
    <updated>2018-07-19T23:08:12+02:00</updated>
    <id>http://foldbyte.github.io/blog/2018/07/19/function-contexts-in-javascript</id>
    <content type="html"><![CDATA[<p>Some time ago I had a discussion with my team mate about function contexts in JavaScript. It was quite confusing for him and when he started asking me more and more questions regarding this topic I felt that it&rsquo;s confusing for me too.
That&rsquo;s why I decided to gather all these oddities and write a blog post.</p>

<p>Here we go!</p>

<p>Every JavaScript developer should know what functions are and how they are created. Everyone should also know what is the <code>this</code> keyword in terms of functions and their contexts.</p>

<p>If you&rsquo;re coming from Object-Oriented languages like Java or C++ you know what <code>this</code> means.</p>

<p>But do you know what it means in JS world? :)</p>

<p>Let&rsquo;s see.</p>

<p>For an OO programmer <code>this</code> is the object on which a given method was called.</p>

<p>So in <strong>Java</strong> when we have:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Person</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Person</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Person</span><span class="o">(</span><span class="s">&quot;Jerry&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">p</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>    <span class="c1">//returns &quot;Jerry&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re calling a <code>getName()</code> method on the object <strong>p</strong> and get the name. So far so good.</p>

<p>This works more less the same in JavaScript:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">getName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s2">&quot;Jerry&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">person</span><span class="p">.</span><span class="nx">getName</span><span class="p">();</span> <span class="c1">//returns &quot;Jerry&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think that&rsquo;s the end of similarities with other languages :)</p>

<p>In JavaScript we can invoke a function on various ways.</p>

<ul>
<li>as a &ldquo;function&rdquo;</li>
<li>as a method</li>
<li>as a constructor using <code>new myFunction()</code></li>
<li>or we could use methods call/apply</li>
</ul>


<p>Today we&rsquo;re gonna take care of how the function context is being created in different scenarios. We will focus mainly on the first three use cases.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">globalFunction</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A function in JavaScript can be created like the example above. The function context in this case is the <strong>window</strong> object.</p>

<p>A bit more interesting case about calling functions and this. What will happen here?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Puzzle</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">getPuzzle</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Puzzle</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>The answer is: everything will work just fine. We get the new object Puzzle. The <strong>return 0</strong> is simply ignored.</p>

<p>Ok but let&rsquo;s change it a little bit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">puzzle</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">puzzleLevel</span><span class="o">:</span> <span class="s2">&quot;hard&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">Puzzle</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">puzzleLevel</span> <span class="o">=</span> <span class="s2">&quot;easy&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">puzzle</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Puzzle</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>What if we try to use an already existing object and return it from constructor functions?</p>

<p>It turns out that when we return a non-object value from a constructor the value will be ignored and a newly created object will be returned.</p>

<p>If however we try to return an object from a constructor JavaScript will return this object and the object created with the <strong>new</strong> keyword will be ignored.</p>

<p>There&rsquo;s still yet another case.</p>

<p>What if we try to call a function without the <strong>new</strong> keyword?</p>

<p>Let&rsquo;s check:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Player</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">play</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s2">&quot;A player plays the game...&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">player</span> <span class="o">=</span> <span class="nx">Player</span><span class="p">();</span> <span class="c1">//???</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can call the above function as a function but the <code>play()</code> method will be created on global context in case if we&rsquo;re not using a non-strict mode.</p>

<p>We get:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Uncaught</span> <span class="nx">TypeError</span><span class="o">:</span> <span class="nx">Cannot</span> <span class="nx">read</span> <span class="nx">property</span> <span class="s1">&#39;play&#39;</span> <span class="nx">of</span> <span class="kc">undefined</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now let&rsquo;s try to run the same code in a <code>&ldquo;use strict&rdquo;</code> mode.</p>

<p>Remember that in a &ldquo;strict mode&rdquo; the <code>this</code> is undefined.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Player</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;use strict&quot;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">play</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s2">&quot;A player plays the game...&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">player</span> <span class="o">=</span> <span class="nx">Player</span><span class="p">();</span> <span class="c1">//???</span>
</span></code></pre></td></tr></table></div></figure>


<p>After running the code we get:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Uncaught</span> <span class="nx">TypeError</span><span class="o">:</span> <span class="nx">Cannot</span> <span class="nx">set</span> <span class="nx">property</span> <span class="s1">&#39;play&#39;</span> <span class="nx">of</span> <span class="kc">undefined</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>This is a good case to show why the <em>&ldquo;strict mode&rdquo;</em> was even introduced.</strong></p>

<p>That&rsquo;s it for now. I hope that after reading this post you have a much better understanding of what is going on behind the scenes and how JavaScript creates function contexts.</p>

<p>Thanks for reading!</p>
]]></content>
  </entry>
  
</feed>
